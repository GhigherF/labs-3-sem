#include <iostream>
#include <IT.h>
#include "Error.h"
#include "In.h"
#include "Log.h"
#include "LT.h"
#include "FST.h"
using namespace std;

namespace Flexer
{
    void Exe(/*LT::LexTable& lextable,In::IN& in/*, Log::LOG& log*/)
    {
       unsigned char* full = new unsigned char[10000];
       //full = in.text;
       //unsigned char a[] = "integerfunctionfi(integerx,integery)|{|declareintegerz;|z=x*(x+y);|returnz;|};|stringfunctionfs(stringa,stringb)|{|declarestringс;|declarestringfunctionsubstr(stringa,integerp,|integern);|c=substr(a,1,3)+b;|returnc;|};|main|{|declareintegerx;|declareintegery;|declareintegerz;|declarestringsa;|declarestringsb;|declarestringsc;|declareintegerfunctionstrlen(stringp);|x=1;|y=5;|sa='1234567890';|sb='1234567890';|z=fi(x,y);|sc=fs(sa,sb);|print'контрольныйпример';|printz;|printsc;|printstrlen(sc);|return0;|};";
       unsigned char a[] = "string integer";
       full=a;
       cout << full;
       unsigned char* part = new unsigned char[1000];
      

       int i = 0;
       while (full != NULL)
       {
           while (full[i]!=' ')
           {
               part += full[i];
           }
           cout << part << '\n';
           i = 0;
           part =TI_STR_DEFAULT;
       }


        /* FST::FST getString(
             gg,
             7,
             FST::NODE(1, FST::RELATION('s', 1)),
             FST::NODE(1, FST::RELATION('t', 2)),
             FST::NODE(1, FST::RELATION('r', 3)),
             FST::NODE(1, FST::RELATION('i', 4)),
             FST::NODE(1, FST::RELATION('n', 5)),
             FST::NODE(1, FST::RELATION('g', 6)),
             FST::NODE()
         );
         FST::FST getInteger(
             gg,
             8,
             FST::NODE(1, FST::RELATION('i', 1)),
             FST::NODE(1, FST::RELATION('n', 2)),
             FST::NODE(1, FST::RELATION('t', 3)),
             FST::NODE(1, FST::RELATION('e', 4)),
             FST::NODE(1, FST::RELATION('g', 5)),
             FST::NODE(1, FST::RELATION('e', 6)),
             FST::NODE(1, FST::RELATION('r', 7)),
             FST::NODE()
         );




         if (FST::execute(getInteger))
         {
          cout << "цепочка: " << getInteger.string << " распознана" << std::endl;
         }
         else
         {
          cout << "цепочка: " << getInteger.string << " не распознана" << std::endl;
         }
     */
    }
}